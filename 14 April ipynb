{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "fcb73fe3-9b31-4552-9dbe-ef8ce552b56f",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "\n",
    "Build a random forest classifier to predict the risk of heart disease based on a dataset of patient information. The dataset contains 303 instances with 14 features, including age, sex, chest pain type, resting blood pressure, serum cholesterol, and maximum heart rate achieved.\n",
    "Dataset link : https://drive.google.com/file/d/1bGoIE4Z2kG5nyh-fGZAJ7LH0ki3UfmSJ/view?usp=share_link\n",
    "\n",
    "Question 1\n",
    "\n",
    "Queston 1 : Preprocess the dataset by handling missing values, encoding categorical variables, and scaling the numerical features if necessary\n",
    "Answer :\n",
    "Step 1 : Read the dataset and check its basic information\n",
    "import pandas as pd\n",
    "df = pd.read_csv('./dataset.csv')\n",
    "df.head()\n",
    "age\tsex\tcp\ttrestbps\tchol\tfbs\trestecg\tthalach\texang\toldpeak\tslope\tca\tthal\ttarget\n",
    "0\t63\t1\t3\t145\t233\t1\t0\t150\t0\t2.3\t0\t0\t1\t1\n",
    "1\t37\t1\t2\t130\t250\t0\t1\t187\t0\t3.5\t0\t0\t2\t1\n",
    "2\t41\t0\t1\t130\t204\t0\t0\t172\t0\t1.4\t2\t0\t2\t1\n",
    "3\t56\t1\t1\t120\t236\t0\t1\t178\t0\t0.8\t2\t0\t2\t1\n",
    "4\t57\t0\t0\t120\t354\t0\t1\t163\t1\t0.6\t2\t0\t2\t1\n",
    "df.shape\n",
    "(303, 14)\n",
    "df.info()\n",
    "<class 'pandas.core.frame.DataFrame'>\n",
    "RangeIndex: 303 entries, 0 to 302\n",
    "Data columns (total 14 columns):\n",
    " #   Column    Non-Null Count  Dtype  \n",
    "---  ------    --------------  -----  \n",
    " 0   age       303 non-null    int64  \n",
    " 1   sex       303 non-null    int64  \n",
    " 2   cp        303 non-null    int64  \n",
    " 3   trestbps  303 non-null    int64  \n",
    " 4   chol      303 non-null    int64  \n",
    " 5   fbs       303 non-null    int64  \n",
    " 6   restecg   303 non-null    int64  \n",
    " 7   thalach   303 non-null    int64  \n",
    " 8   exang     303 non-null    int64  \n",
    " 9   oldpeak   303 non-null    float64\n",
    " 10  slope     303 non-null    int64  \n",
    " 11  ca        303 non-null    int64  \n",
    " 12  thal      303 non-null    int64  \n",
    " 13  target    303 non-null    int64  \n",
    "dtypes: float64(1), int64(13)\n",
    "memory usage: 33.3 KB\n",
    "Step 2 : Check Missing Values in Dataset\n",
    "df.isnull().sum()\n",
    "age         0\n",
    "sex         0\n",
    "cp          0\n",
    "trestbps    0\n",
    "chol        0\n",
    "fbs         0\n",
    "restecg     0\n",
    "thalach     0\n",
    "exang       0\n",
    "oldpeak     0\n",
    "slope       0\n",
    "ca          0\n",
    "thal        0\n",
    "target      0\n",
    "dtype: int64\n",
    "No Null Values found in dataset\n",
    "Step 3 : Dataset Description\n",
    "df.describe().T\n",
    "count\tmean\tstd\tmin\t25%\t50%\t75%\tmax\n",
    "age\t303.0\t54.366337\t9.082101\t29.0\t47.5\t55.0\t61.0\t77.0\n",
    "sex\t303.0\t0.683168\t0.466011\t0.0\t0.0\t1.0\t1.0\t1.0\n",
    "cp\t303.0\t0.966997\t1.032052\t0.0\t0.0\t1.0\t2.0\t3.0\n",
    "trestbps\t303.0\t131.623762\t17.538143\t94.0\t120.0\t130.0\t140.0\t200.0\n",
    "chol\t303.0\t246.264026\t51.830751\t126.0\t211.0\t240.0\t274.5\t564.0\n",
    "fbs\t303.0\t0.148515\t0.356198\t0.0\t0.0\t0.0\t0.0\t1.0\n",
    "restecg\t303.0\t0.528053\t0.525860\t0.0\t0.0\t1.0\t1.0\t2.0\n",
    "thalach\t303.0\t149.646865\t22.905161\t71.0\t133.5\t153.0\t166.0\t202.0\n",
    "exang\t303.0\t0.326733\t0.469794\t0.0\t0.0\t0.0\t1.0\t1.0\n",
    "oldpeak\t303.0\t1.039604\t1.161075\t0.0\t0.0\t0.8\t1.6\t6.2\n",
    "slope\t303.0\t1.399340\t0.616226\t0.0\t1.0\t1.0\t2.0\t2.0\n",
    "ca\t303.0\t0.729373\t1.022606\t0.0\t0.0\t0.0\t1.0\t4.0\n",
    "thal\t303.0\t2.313531\t0.612277\t0.0\t2.0\t2.0\t3.0\t3.0\n",
    "target\t303.0\t0.544554\t0.498835\t0.0\t0.0\t1.0\t1.0\t1.0\n",
    "df.nunique().sort_values()\n",
    "sex           2\n",
    "fbs           2\n",
    "exang         2\n",
    "target        2\n",
    "restecg       3\n",
    "slope         3\n",
    "cp            4\n",
    "thal          4\n",
    "ca            5\n",
    "oldpeak      40\n",
    "age          41\n",
    "trestbps     49\n",
    "thalach      91\n",
    "chol        152\n",
    "dtype: int64\n",
    "No Encoding is required as all dataypes are already in numerical format also random forest does not require feature scaling\n",
    "Step 4 : Seperating X and Y variables\n",
    "X = df.drop(labels=['target'],axis=1)\n",
    "Y = df[['target']]\n",
    "Y.value_counts()\n",
    "target\n",
    "1         165\n",
    "0         138\n",
    "dtype: int64\n",
    "Question 2\n",
    "\n",
    "Question 2 : Split the dataset into a training set (70%) and a test set (30%).\n",
    "Answer :\n",
    "from sklearn.model_selection import train_test_split\n",
    "xtrain, xtest, ytrain, ytest = train_test_split(X,Y,test_size=0.3,random_state=42)\n",
    "xtrain.shape\n",
    "(212, 13)\n",
    "xtest.shape\n",
    "(91, 13)\n",
    "Question 3\n",
    "\n",
    "Question 3 : Train a random forest classifier on the training set using 100 trees and a maximum depth of 10 for each tree. Use the default values for other hyperparameters.\n",
    "Answer :\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "rfc = RandomForestClassifier(n_estimators=100, max_depth=10)\n",
    "rfc.fit(xtrain,ytrain.values.flatten())\n",
    "RandomForestClassifier(max_depth=10)\n",
    "In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook.\n",
    "On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.\n",
    "Question 4\n",
    "\n",
    "Question 4 : Evaluate the performance of the model on the test set using accuracy, precision, recall, and F1 score\n",
    "Answer :\n",
    "# Creating a function to evaluate model\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n",
    "def evaluate_model(x,y,model):\n",
    "    ypred = model.predict(x)\n",
    "    acc = accuracy_score(y,ypred)\n",
    "    pre = precision_score(y,ypred)\n",
    "    rec = recall_score(y,ypred)\n",
    "    f1 = f1_score(y,ypred)\n",
    "    print(f'Accuracy Score  : {acc:.4f}')\n",
    "    print(f'Precision Score : {pre:.4f}')\n",
    "    print(f'Recall Score    : {rec:.4f}')\n",
    "    print(f'F1 Score        : {f1:.4f}')\n",
    "    return acc, pre, rec, f1\n",
    "# Evaluate model on test data\n",
    "acc_base, pre_base, rec_base, f1_base = evaluate_model(xtest, ytest, rfc)\n",
    "Accuracy Score  : 0.8022\n",
    "Precision Score : 0.8200\n",
    "Recall Score    : 0.8200\n",
    "F1 Score        : 0.8200\n",
    "from sklearn.metrics import classification_report\n",
    "ypred_test = rfc.predict(xtest)\n",
    "print(classification_report(ytest,ypred_test))\n",
    "              precision    recall  f1-score   support\n",
    "\n",
    "           0       0.78      0.78      0.78        41\n",
    "           1       0.82      0.82      0.82        50\n",
    "\n",
    "    accuracy                           0.80        91\n",
    "   macro avg       0.80      0.80      0.80        91\n",
    "weighted avg       0.80      0.80      0.80        91\n",
    "\n",
    "from sklearn.metrics import confusion_matrix\n",
    "import seaborn as sns\n",
    "cf = confusion_matrix(ytest,ypred_test)\n",
    "sns.heatmap(cf, annot=True, fmt='d')\n",
    "<Axes: >\n",
    "\n",
    "Question 5\n",
    "\n",
    "Question 5 : Use the feature importance scores to identify the top 5 most important features in predicting heart disease risk. Visualise the feature importances using a bar chart.\n",
    "Answer :\n",
    "rfc.feature_importances_\n",
    "array([0.08679309, 0.02413289, 0.12789861, 0.06893361, 0.06885121,\n",
    "       0.01121818, 0.01350521, 0.11524388, 0.07047077, 0.10945536,\n",
    "       0.04820474, 0.1376403 , 0.11765215])\n",
    "rfc.feature_names_in_\n",
    "array(['age', 'sex', 'cp', 'trestbps', 'chol', 'fbs', 'restecg',\n",
    "       'thalach', 'exang', 'oldpeak', 'slope', 'ca', 'thal'], dtype=object)\n",
    "imp = pd.Series(rfc.feature_importances_)\n",
    "imp.index = rfc.feature_names_in_\n",
    "imp = imp.sort_values(ascending=False)\n",
    "imp\n",
    "ca          0.137640\n",
    "cp          0.127899\n",
    "thal        0.117652\n",
    "thalach     0.115244\n",
    "oldpeak     0.109455\n",
    "age         0.086793\n",
    "exang       0.070471\n",
    "trestbps    0.068934\n",
    "chol        0.068851\n",
    "slope       0.048205\n",
    "sex         0.024133\n",
    "restecg     0.013505\n",
    "fbs         0.011218\n",
    "dtype: float64\n",
    "top5 = list(imp[0:5].index)\n",
    "print(f'Top 5 features in the data are : {top5}')\n",
    "Top 5 features in the data are : ['ca', 'cp', 'thal', 'thalach', 'oldpeak']\n",
    "imp.plot(kind='bar',title='Feature Importances Plot', figsize=(16,8))\n",
    "<Axes: title={'center': 'Feature Importances Plot'}>\n",
    "\n",
    "Question 6\n",
    "\n",
    "Question 6 : Tune the hyperparameters of the random forest classifier using grid search or random search. Try different values of the number of trees, maximum depth, minimum samples split, and minimum samples leaf. Use 5-fold cross-validation to evaluate the performance of each set of hyperparameters.\n",
    "Answer :\n",
    "# Defining the parameters for tuning\n",
    "parameters = {\n",
    "    'n_estimators':[10,50,100,200,300,400],\n",
    "    'max_depth':[4,5,6,7,8,9,10],\n",
    "    'min_samples_leaf':[2,3,4,5,6],\n",
    "    'min_samples_split':[2,5,10]\n",
    "}\n",
    "# Performing Randomized Search CV\n",
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "rscv = RandomizedSearchCV(RandomForestClassifier(),\n",
    "                          param_distributions=parameters,\n",
    "                          cv=5, \n",
    "                          scoring='f1',\n",
    "                          n_iter=50,\n",
    "                          verbose=3)\n",
    "rscv.fit(xtrain,ytrain.values.flatten())\n",
    "Fitting 5 folds for each of 50 candidates, totalling 250 fits\n",
    "[CV 1/5] END max_depth=4, min_samples_leaf=5, min_samples_split=5, n_estimators=10;, score=0.864 total time=   0.0s\n",
    "[CV 2/5] END max_depth=4, min_samples_leaf=5, min_samples_split=5, n_estimators=10;, score=0.833 total time=   0.0s\n",
    "[CV 3/5] END max_depth=4, min_samples_leaf=5, min_samples_split=5, n_estimators=10;, score=0.731 total time=   0.0s\n",
    "[CV 4/5] END max_depth=4, min_samples_leaf=5, min_samples_split=5, n_estimators=10;, score=0.880 total time=   0.0s\n",
    "[CV 5/5] END max_depth=4, min_samples_leaf=5, min_samples_split=5, n_estimators=10;, score=0.762 total time=   0.0s\n",
    "[CV 1/5] END max_depth=7, min_samples_leaf=4, min_samples_split=2, n_estimators=50;, score=0.889 total time=   0.0s\n",
    "[CV 2/5] END max_depth=7, min_samples_leaf=4, min_samples_split=2, n_estimators=50;, score=0.833 total time=   0.0s\n",
    "[CV 3/5] END max_depth=7, min_samples_leaf=4, min_samples_split=2, n_estimators=50;, score=0.760 total time=   0.0s\n",
    "[CV 4/5] END max_depth=7, min_samples_leaf=4, min_samples_split=2, n_estimators=50;, score=0.894 total time=   0.0s\n",
    "[CV 5/5] END max_depth=7, min_samples_leaf=4, min_samples_split=2, n_estimators=50;, score=0.800 total time=   0.0s\n",
    "[CV 1/5] END max_depth=4, min_samples_leaf=6, min_samples_split=2, n_estimators=200;, score=0.884 total time=   0.1s\n",
    "[CV 2/5] END max_depth=4, min_samples_leaf=6, min_samples_split=2, n_estimators=200;, score=0.880 total time=   0.1s\n",
    "[CV 3/5] END max_depth=4, min_samples_leaf=6, min_samples_split=2, n_estimators=200;, score=0.784 total time=   0.1s\n",
    "[CV 4/5] END max_depth=4, min_samples_leaf=6, min_samples_split=2, n_estimators=200;, score=0.917 total time=   0.1s\n",
    "[CV 5/5] END max_depth=4, min_samples_leaf=6, min_samples_split=2, n_estimators=200;, score=0.773 total time=   0.1s\n",
    "[CV 1/5] END max_depth=8, min_samples_leaf=4, min_samples_split=5, n_estimators=200;, score=0.884 total time=   0.1s\n",
    "[CV 2/5] END max_depth=8, min_samples_leaf=4, min_samples_split=5, n_estimators=200;, score=0.880 total time=   0.1s\n",
    "[CV 3/5] END max_depth=8, min_samples_leaf=4, min_samples_split=5, n_estimators=200;, score=0.784 total time=   0.1s\n",
    "[CV 4/5] END max_depth=8, min_samples_leaf=4, min_samples_split=5, n_estimators=200;, score=0.917 total time=   0.1s\n",
    "[CV 5/5] END max_depth=8, min_samples_leaf=4, min_samples_split=5, n_estimators=200;, score=0.773 total time=   0.1s\n",
    "[CV 1/5] END max_depth=4, min_samples_leaf=4, min_samples_split=5, n_estimators=300;, score=0.884 total time=   0.2s\n",
    "[CV 2/5] END max_depth=4, min_samples_leaf=4, min_samples_split=5, n_estimators=300;, score=0.880 total time=   0.2s\n",
    "[CV 3/5] END max_depth=4, min_samples_leaf=4, min_samples_split=5, n_estimators=300;, score=0.808 total time=   0.2s\n",
    "[CV 4/5] END max_depth=4, min_samples_leaf=4, min_samples_split=5, n_estimators=300;, score=0.917 total time=   0.2s\n",
    "[CV 5/5] END max_depth=4, min_samples_leaf=4, min_samples_split=5, n_estimators=300;, score=0.744 total time=   0.2s\n",
    "[CV 1/5] END max_depth=7, min_samples_leaf=5, min_samples_split=5, n_estimators=300;, score=0.884 total time=   0.2s\n",
    "[CV 2/5] END max_depth=7, min_samples_leaf=5, min_samples_split=5, n_estimators=300;, score=0.857 total time=   0.2s\n",
    "[CV 3/5] END max_depth=7, min_samples_leaf=5, min_samples_split=5, n_estimators=300;, score=0.784 total time=   0.2s\n",
    "[CV 4/5] END max_depth=7, min_samples_leaf=5, min_samples_split=5, n_estimators=300;, score=0.917 total time=   0.2s\n",
    "[CV 5/5] END max_depth=7, min_samples_leaf=5, min_samples_split=5, n_estimators=300;, score=0.762 total time=   0.2s\n",
    "[CV 1/5] END max_depth=4, min_samples_leaf=4, min_samples_split=10, n_estimators=50;, score=0.870 total time=   0.0s\n",
    "[CV 2/5] END max_depth=4, min_samples_leaf=4, min_samples_split=10, n_estimators=50;, score=0.880 total time=   0.0s\n",
    "[CV 3/5] END max_depth=4, min_samples_leaf=4, min_samples_split=10, n_estimators=50;, score=0.824 total time=   0.0s\n",
    "[CV 4/5] END max_depth=4, min_samples_leaf=4, min_samples_split=10, n_estimators=50;, score=0.894 total time=   0.0s\n",
    "[CV 5/5] END max_depth=4, min_samples_leaf=4, min_samples_split=10, n_estimators=50;, score=0.773 total time=   0.0s\n",
    "[CV 1/5] END max_depth=7, min_samples_leaf=3, min_samples_split=5, n_estimators=10;, score=0.870 total time=   0.0s\n",
    "[CV 2/5] END max_depth=7, min_samples_leaf=3, min_samples_split=5, n_estimators=10;, score=0.880 total time=   0.0s\n",
    "[CV 3/5] END max_depth=7, min_samples_leaf=3, min_samples_split=5, n_estimators=10;, score=0.720 total time=   0.0s\n",
    "[CV 4/5] END max_depth=7, min_samples_leaf=3, min_samples_split=5, n_estimators=10;, score=0.913 total time=   0.0s\n",
    "[CV 5/5] END max_depth=7, min_samples_leaf=3, min_samples_split=5, n_estimators=10;, score=0.829 total time=   0.0s\n",
    "[CV 1/5] END max_depth=10, min_samples_leaf=6, min_samples_split=5, n_estimators=10;, score=0.837 total time=   0.0s\n",
    "[CV 2/5] END max_depth=10, min_samples_leaf=6, min_samples_split=5, n_estimators=10;, score=0.833 total time=   0.0s\n",
    "[CV 3/5] END max_depth=10, min_samples_leaf=6, min_samples_split=5, n_estimators=10;, score=0.750 total time=   0.0s\n",
    "[CV 4/5] END max_depth=10, min_samples_leaf=6, min_samples_split=5, n_estimators=10;, score=0.894 total time=   0.0s\n",
    "[CV 5/5] END max_depth=10, min_samples_leaf=6, min_samples_split=5, n_estimators=10;, score=0.744 total time=   0.0s\n",
    "[CV 1/5] END max_depth=6, min_samples_leaf=5, min_samples_split=2, n_estimators=400;, score=0.884 total time=   0.3s\n",
    "[CV 2/5] END max_depth=6, min_samples_leaf=5, min_samples_split=2, n_estimators=400;, score=0.880 total time=   0.3s\n",
    "[CV 3/5] END max_depth=6, min_samples_leaf=5, min_samples_split=2, n_estimators=400;, score=0.792 total time=   0.3s\n",
    "[CV 4/5] END max_depth=6, min_samples_leaf=5, min_samples_split=2, n_estimators=400;, score=0.917 total time=   0.3s\n",
    "[CV 5/5] END max_depth=6, min_samples_leaf=5, min_samples_split=2, n_estimators=400;, score=0.773 total time=   0.4s\n",
    "[CV 1/5] END max_depth=5, min_samples_leaf=2, min_samples_split=2, n_estimators=400;, score=0.884 total time=   0.3s\n",
    "[CV 2/5] END max_depth=5, min_samples_leaf=2, min_samples_split=2, n_estimators=400;, score=0.857 total time=   0.3s\n",
    "[CV 3/5] END max_depth=5, min_samples_leaf=2, min_samples_split=2, n_estimators=400;, score=0.760 total time=   0.3s\n",
    "[CV 4/5] END max_depth=5, min_samples_leaf=2, min_samples_split=2, n_estimators=400;, score=0.917 total time=   0.3s\n",
    "[CV 5/5] END max_depth=5, min_samples_leaf=2, min_samples_split=2, n_estimators=400;, score=0.744 total time=   0.3s\n",
    "[CV 1/5] END max_depth=10, min_samples_leaf=6, min_samples_split=10, n_estimators=300;, score=0.884 total time=   0.2s\n",
    "[CV 2/5] END max_depth=10, min_samples_leaf=6, min_samples_split=10, n_estimators=300;, score=0.857 total time=   0.2s\n",
    "[CV 3/5] END max_depth=10, min_samples_leaf=6, min_samples_split=10, n_estimators=300;, score=0.784 total time=   0.2s\n",
    "[CV 4/5] END max_depth=10, min_samples_leaf=6, min_samples_split=10, n_estimators=300;, score=0.917 total time=   0.2s\n",
    "[CV 5/5] END max_depth=10, min_samples_leaf=6, min_samples_split=10, n_estimators=300;, score=0.762 total time=   0.2s\n",
    "[CV 1/5] END max_depth=6, min_samples_leaf=3, min_samples_split=10, n_estimators=50;, score=0.909 total time=   0.0s\n",
    "[CV 2/5] END max_depth=6, min_samples_leaf=3, min_samples_split=10, n_estimators=50;, score=0.833 total time=   0.0s\n",
    "[CV 3/5] END max_depth=6, min_samples_leaf=3, min_samples_split=10, n_estimators=50;, score=0.760 total time=   0.0s\n",
    "[CV 4/5] END max_depth=6, min_samples_leaf=3, min_samples_split=10, n_estimators=50;, score=0.936 total time=   0.0s\n",
    "[CV 5/5] END max_depth=6, min_samples_leaf=3, min_samples_split=10, n_estimators=50;, score=0.727 total time=   0.0s\n",
    "[CV 1/5] END max_depth=5, min_samples_leaf=2, min_samples_split=5, n_estimators=300;, score=0.884 total time=   0.2s\n",
    "[CV 2/5] END max_depth=5, min_samples_leaf=2, min_samples_split=5, n_estimators=300;, score=0.880 total time=   0.2s\n",
    "[CV 3/5] END max_depth=5, min_samples_leaf=2, min_samples_split=5, n_estimators=300;, score=0.784 total time=   0.2s\n",
    "[CV 4/5] END max_depth=5, min_samples_leaf=2, min_samples_split=5, n_estimators=300;, score=0.917 total time=   0.2s\n",
    "[CV 5/5] END max_depth=5, min_samples_leaf=2, min_samples_split=5, n_estimators=300;, score=0.744 total time=   0.2s\n",
    "[CV 1/5] END max_depth=10, min_samples_leaf=5, min_samples_split=5, n_estimators=100;, score=0.884 total time=   0.0s\n",
    "[CV 2/5] END max_depth=10, min_samples_leaf=5, min_samples_split=5, n_estimators=100;, score=0.880 total time=   0.0s\n",
    "[CV 3/5] END max_depth=10, min_samples_leaf=5, min_samples_split=5, n_estimators=100;, score=0.808 total time=   0.0s\n",
    "[CV 4/5] END max_depth=10, min_samples_leaf=5, min_samples_split=5, n_estimators=100;, score=0.917 total time=   0.0s\n",
    "[CV 5/5] END max_depth=10, min_samples_leaf=5, min_samples_split=5, n_estimators=100;, score=0.744 total time=   0.0s\n",
    "[CV 1/5] END max_depth=8, min_samples_leaf=3, min_samples_split=2, n_estimators=10;, score=0.837 total time=   0.0s\n",
    "[CV 2/5] END max_depth=8, min_samples_leaf=3, min_samples_split=2, n_estimators=10;, score=0.783 total time=   0.0s\n",
    "[CV 3/5] END max_depth=8, min_samples_leaf=3, min_samples_split=2, n_estimators=10;, score=0.875 total time=   0.0s\n",
    "[CV 4/5] END max_depth=8, min_samples_leaf=3, min_samples_split=2, n_estimators=10;, score=0.898 total time=   0.0s\n",
    "[CV 5/5] END max_depth=8, min_samples_leaf=3, min_samples_split=2, n_estimators=10;, score=0.809 total time=   0.0s\n",
    "[CV 1/5] END max_depth=5, min_samples_leaf=5, min_samples_split=10, n_estimators=200;, score=0.884 total time=   0.1s\n",
    "[CV 2/5] END max_depth=5, min_samples_leaf=5, min_samples_split=10, n_estimators=200;, score=0.857 total time=   0.1s\n",
    "[CV 3/5] END max_depth=5, min_samples_leaf=5, min_samples_split=10, n_estimators=200;, score=0.784 total time=   0.1s\n",
    "[CV 4/5] END max_depth=5, min_samples_leaf=5, min_samples_split=10, n_estimators=200;, score=0.917 total time=   0.1s\n",
    "[CV 5/5] END max_depth=5, min_samples_leaf=5, min_samples_split=10, n_estimators=200;, score=0.744 total time=   0.1s\n",
    "[CV 1/5] END max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=100;, score=0.884 total time=   0.0s\n",
    "[CV 2/5] END max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=100;, score=0.857 total time=   0.0s\n",
    "[CV 3/5] END max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=100;, score=0.824 total time=   0.0s\n",
    "[CV 4/5] END max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=100;, score=0.870 total time=   0.0s\n",
    "[CV 5/5] END max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=100;, score=0.791 total time=   0.0s\n",
    "[CV 1/5] END max_depth=4, min_samples_leaf=2, min_samples_split=2, n_estimators=50;, score=0.870 total time=   0.0s\n",
    "[CV 2/5] END max_depth=4, min_samples_leaf=2, min_samples_split=2, n_estimators=50;, score=0.857 total time=   0.0s\n",
    "[CV 3/5] END max_depth=4, min_samples_leaf=2, min_samples_split=2, n_estimators=50;, score=0.784 total time=   0.0s\n",
    "[CV 4/5] END max_depth=4, min_samples_leaf=2, min_samples_split=2, n_estimators=50;, score=0.936 total time=   0.0s\n",
    "[CV 5/5] END max_depth=4, min_samples_leaf=2, min_samples_split=2, n_estimators=50;, score=0.711 total time=   0.0s\n",
    "[CV 1/5] END max_depth=7, min_samples_leaf=2, min_samples_split=5, n_estimators=50;, score=0.837 total time=   0.0s\n",
    "[CV 2/5] END max_depth=7, min_samples_leaf=2, min_samples_split=5, n_estimators=50;, score=0.898 total time=   0.0s\n",
    "[CV 3/5] END max_depth=7, min_samples_leaf=2, min_samples_split=5, n_estimators=50;, score=0.769 total time=   0.0s\n",
    "[CV 4/5] END max_depth=7, min_samples_leaf=2, min_samples_split=5, n_estimators=50;, score=0.894 total time=   0.0s\n",
    "[CV 5/5] END max_depth=7, min_samples_leaf=2, min_samples_split=5, n_estimators=50;, score=0.773 total time=   0.0s\n",
    "[CV 1/5] END max_depth=6, min_samples_leaf=3, min_samples_split=10, n_estimators=200;, score=0.864 total time=   0.1s\n",
    "[CV 2/5] END max_depth=6, min_samples_leaf=3, min_samples_split=10, n_estimators=200;, score=0.880 total time=   0.1s\n",
    "[CV 3/5] END max_depth=6, min_samples_leaf=3, min_samples_split=10, n_estimators=200;, score=0.784 total time=   0.1s\n",
    "[CV 4/5] END max_depth=6, min_samples_leaf=3, min_samples_split=10, n_estimators=200;, score=0.917 total time=   0.1s\n",
    "[CV 5/5] END max_depth=6, min_samples_leaf=3, min_samples_split=10, n_estimators=200;, score=0.791 total time=   0.1s\n",
    "[CV 1/5] END max_depth=6, min_samples_leaf=2, min_samples_split=2, n_estimators=200;, score=0.864 total time=   0.1s\n",
    "[CV 2/5] END max_depth=6, min_samples_leaf=2, min_samples_split=2, n_estimators=200;, score=0.857 total time=   0.1s\n",
    "[CV 3/5] END max_depth=6, min_samples_leaf=2, min_samples_split=2, n_estimators=200;, score=0.760 total time=   0.1s\n",
    "[CV 4/5] END max_depth=6, min_samples_leaf=2, min_samples_split=2, n_estimators=200;, score=0.894 total time=   0.1s\n",
    "[CV 5/5] END max_depth=6, min_samples_leaf=2, min_samples_split=2, n_estimators=200;, score=0.791 total time=   0.1s\n",
    "[CV 1/5] END max_depth=8, min_samples_leaf=2, min_samples_split=10, n_estimators=10;, score=0.783 total time=   0.0s\n",
    "[CV 2/5] END max_depth=8, min_samples_leaf=2, min_samples_split=10, n_estimators=10;, score=0.840 total time=   0.0s\n",
    "[CV 3/5] END max_depth=8, min_samples_leaf=2, min_samples_split=10, n_estimators=10;, score=0.735 total time=   0.0s\n",
    "[CV 4/5] END max_depth=8, min_samples_leaf=2, min_samples_split=10, n_estimators=10;, score=0.894 total time=   0.0s\n",
    "[CV 5/5] END max_depth=8, min_samples_leaf=2, min_samples_split=10, n_estimators=10;, score=0.744 total time=   0.0s\n",
    "[CV 1/5] END max_depth=7, min_samples_leaf=6, min_samples_split=5, n_estimators=10;, score=0.762 total time=   0.0s\n",
    "[CV 2/5] END max_depth=7, min_samples_leaf=6, min_samples_split=5, n_estimators=10;, score=0.880 total time=   0.0s\n",
    "[CV 3/5] END max_depth=7, min_samples_leaf=6, min_samples_split=5, n_estimators=10;, score=0.792 total time=   0.0s\n",
    "[CV 4/5] END max_depth=7, min_samples_leaf=6, min_samples_split=5, n_estimators=10;, score=0.880 total time=   0.0s\n",
    "[CV 5/5] END max_depth=7, min_samples_leaf=6, min_samples_split=5, n_estimators=10;, score=0.818 total time=   0.0s\n",
    "[CV 1/5] END max_depth=8, min_samples_leaf=2, min_samples_split=2, n_estimators=50;, score=0.864 total time=   0.0s\n",
    "[CV 2/5] END max_depth=8, min_samples_leaf=2, min_samples_split=2, n_estimators=50;, score=0.857 total time=   0.0s\n",
    "[CV 3/5] END max_depth=8, min_samples_leaf=2, min_samples_split=2, n_estimators=50;, score=0.760 total time=   0.0s\n",
    "[CV 4/5] END max_depth=8, min_samples_leaf=2, min_samples_split=2, n_estimators=50;, score=0.894 total time=   0.0s\n",
    "[CV 5/5] END max_depth=8, min_samples_leaf=2, min_samples_split=2, n_estimators=50;, score=0.727 total time=   0.0s\n",
    "[CV 1/5] END max_depth=5, min_samples_leaf=5, min_samples_split=2, n_estimators=400;, score=0.884 total time=   0.3s\n",
    "[CV 2/5] END max_depth=5, min_samples_leaf=5, min_samples_split=2, n_estimators=400;, score=0.880 total time=   0.3s\n",
    "[CV 3/5] END max_depth=5, min_samples_leaf=5, min_samples_split=2, n_estimators=400;, score=0.784 total time=   0.3s\n",
    "[CV 4/5] END max_depth=5, min_samples_leaf=5, min_samples_split=2, n_estimators=400;, score=0.917 total time=   0.3s\n",
    "[CV 5/5] END max_depth=5, min_samples_leaf=5, min_samples_split=2, n_estimators=400;, score=0.744 total time=   0.3s\n",
    "[CV 1/5] END max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=10;, score=0.909 total time=   0.0s\n",
    "[CV 2/5] END max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=10;, score=0.833 total time=   0.0s\n",
    "[CV 3/5] END max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=10;, score=0.769 total time=   0.0s\n",
    "[CV 4/5] END max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=10;, score=0.917 total time=   0.0s\n",
    "[CV 5/5] END max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=10;, score=0.791 total time=   0.0s\n",
    "[CV 1/5] END max_depth=5, min_samples_leaf=6, min_samples_split=2, n_estimators=50;, score=0.909 total time=   0.0s\n",
    "[CV 2/5] END max_depth=5, min_samples_leaf=6, min_samples_split=2, n_estimators=50;, score=0.857 total time=   0.0s\n",
    "[CV 3/5] END max_depth=5, min_samples_leaf=6, min_samples_split=2, n_estimators=50;, score=0.824 total time=   0.0s\n",
    "[CV 4/5] END max_depth=5, min_samples_leaf=6, min_samples_split=2, n_estimators=50;, score=0.917 total time=   0.0s\n",
    "[CV 5/5] END max_depth=5, min_samples_leaf=6, min_samples_split=2, n_estimators=50;, score=0.762 total time=   0.0s\n",
    "[CV 1/5] END max_depth=9, min_samples_leaf=2, min_samples_split=10, n_estimators=400;, score=0.864 total time=   0.3s\n",
    "[CV 2/5] END max_depth=9, min_samples_leaf=2, min_samples_split=10, n_estimators=400;, score=0.857 total time=   0.3s\n",
    "[CV 3/5] END max_depth=9, min_samples_leaf=2, min_samples_split=10, n_estimators=400;, score=0.760 total time=   0.3s\n",
    "[CV 4/5] END max_depth=9, min_samples_leaf=2, min_samples_split=10, n_estimators=400;, score=0.917 total time=   0.3s\n",
    "[CV 5/5] END max_depth=9, min_samples_leaf=2, min_samples_split=10, n_estimators=400;, score=0.744 total time=   0.3s\n",
    "[CV 1/5] END max_depth=7, min_samples_leaf=3, min_samples_split=5, n_estimators=50;, score=0.870 total time=   0.0s\n",
    "[CV 2/5] END max_depth=7, min_samples_leaf=3, min_samples_split=5, n_estimators=50;, score=0.880 total time=   0.0s\n",
    "[CV 3/5] END max_depth=7, min_samples_leaf=3, min_samples_split=5, n_estimators=50;, score=0.800 total time=   0.0s\n",
    "[CV 4/5] END max_depth=7, min_samples_leaf=3, min_samples_split=5, n_estimators=50;, score=0.889 total time=   0.0s\n",
    "[CV 5/5] END max_depth=7, min_samples_leaf=3, min_samples_split=5, n_estimators=50;, score=0.762 total time=   0.0s\n",
    "[CV 1/5] END max_depth=7, min_samples_leaf=4, min_samples_split=5, n_estimators=200;, score=0.864 total time=   0.1s\n",
    "[CV 2/5] END max_depth=7, min_samples_leaf=4, min_samples_split=5, n_estimators=200;, score=0.857 total time=   0.1s\n",
    "[CV 3/5] END max_depth=7, min_samples_leaf=4, min_samples_split=5, n_estimators=200;, score=0.769 total time=   0.1s\n",
    "[CV 4/5] END max_depth=7, min_samples_leaf=4, min_samples_split=5, n_estimators=200;, score=0.917 total time=   0.1s\n",
    "[CV 5/5] END max_depth=7, min_samples_leaf=4, min_samples_split=5, n_estimators=200;, score=0.791 total time=   0.1s\n",
    "[CV 1/5] END max_depth=8, min_samples_leaf=4, min_samples_split=2, n_estimators=10;, score=0.826 total time=   0.0s\n",
    "[CV 2/5] END max_depth=8, min_samples_leaf=4, min_samples_split=2, n_estimators=10;, score=0.857 total time=   0.0s\n",
    "[CV 3/5] END max_depth=8, min_samples_leaf=4, min_samples_split=2, n_estimators=10;, score=0.755 total time=   0.0s\n",
    "[CV 4/5] END max_depth=8, min_samples_leaf=4, min_samples_split=2, n_estimators=10;, score=0.913 total time=   0.0s\n",
    "[CV 5/5] END max_depth=8, min_samples_leaf=4, min_samples_split=2, n_estimators=10;, score=0.744 total time=   0.0s\n",
    "[CV 1/5] END max_depth=5, min_samples_leaf=5, min_samples_split=2, n_estimators=300;, score=0.884 total time=   0.2s\n",
    "[CV 2/5] END max_depth=5, min_samples_leaf=5, min_samples_split=2, n_estimators=300;, score=0.880 total time=   0.2s\n",
    "[CV 3/5] END max_depth=5, min_samples_leaf=5, min_samples_split=2, n_estimators=300;, score=0.800 total time=   0.2s\n",
    "[CV 4/5] END max_depth=5, min_samples_leaf=5, min_samples_split=2, n_estimators=300;, score=0.917 total time=   0.2s\n",
    "[CV 5/5] END max_depth=5, min_samples_leaf=5, min_samples_split=2, n_estimators=300;, score=0.791 total time=   0.2s\n",
    "[CV 1/5] END max_depth=9, min_samples_leaf=5, min_samples_split=2, n_estimators=300;, score=0.884 total time=   0.2s\n",
    "[CV 2/5] END max_depth=9, min_samples_leaf=5, min_samples_split=2, n_estimators=300;, score=0.880 total time=   0.2s\n",
    "[CV 3/5] END max_depth=9, min_samples_leaf=5, min_samples_split=2, n_estimators=300;, score=0.784 total time=   0.2s\n",
    "[CV 4/5] END max_depth=9, min_samples_leaf=5, min_samples_split=2, n_estimators=300;, score=0.917 total time=   0.2s\n",
    "[CV 5/5] END max_depth=9, min_samples_leaf=5, min_samples_split=2, n_estimators=300;, score=0.744 total time=   0.2s\n",
    "[CV 1/5] END max_depth=4, min_samples_leaf=2, min_samples_split=2, n_estimators=400;, score=0.864 total time=   0.3s\n",
    "[CV 2/5] END max_depth=4, min_samples_leaf=2, min_samples_split=2, n_estimators=400;, score=0.857 total time=   0.3s\n",
    "[CV 3/5] END max_depth=4, min_samples_leaf=2, min_samples_split=2, n_estimators=400;, score=0.784 total time=   0.3s\n",
    "[CV 4/5] END max_depth=4, min_samples_leaf=2, min_samples_split=2, n_estimators=400;, score=0.917 total time=   0.3s\n",
    "[CV 5/5] END max_depth=4, min_samples_leaf=2, min_samples_split=2, n_estimators=400;, score=0.744 total time=   0.3s\n",
    "[CV 1/5] END max_depth=8, min_samples_leaf=3, min_samples_split=5, n_estimators=50;, score=0.884 total time=   0.0s\n",
    "[CV 2/5] END max_depth=8, min_samples_leaf=3, min_samples_split=5, n_estimators=50;, score=0.833 total time=   0.0s\n",
    "[CV 3/5] END max_depth=8, min_samples_leaf=3, min_samples_split=5, n_estimators=50;, score=0.808 total time=   0.0s\n",
    "[CV 4/5] END max_depth=8, min_samples_leaf=3, min_samples_split=5, n_estimators=50;, score=0.894 total time=   0.0s\n",
    "[CV 5/5] END max_depth=8, min_samples_leaf=3, min_samples_split=5, n_estimators=50;, score=0.744 total time=   0.0s\n",
    "[CV 1/5] END max_depth=9, min_samples_leaf=4, min_samples_split=10, n_estimators=50;, score=0.884 total time=   0.0s\n",
    "[CV 2/5] END max_depth=9, min_samples_leaf=4, min_samples_split=10, n_estimators=50;, score=0.880 total time=   0.0s\n",
    "[CV 3/5] END max_depth=9, min_samples_leaf=4, min_samples_split=10, n_estimators=50;, score=0.824 total time=   0.0s\n",
    "[CV 4/5] END max_depth=9, min_samples_leaf=4, min_samples_split=10, n_estimators=50;, score=0.936 total time=   0.0s\n",
    "[CV 5/5] END max_depth=9, min_samples_leaf=4, min_samples_split=10, n_estimators=50;, score=0.744 total time=   0.0s\n",
    "[CV 1/5] END max_depth=5, min_samples_leaf=6, min_samples_split=2, n_estimators=10;, score=0.909 total time=   0.0s\n",
    "[CV 2/5] END max_depth=5, min_samples_leaf=6, min_samples_split=2, n_estimators=10;, score=0.840 total time=   0.0s\n",
    "[CV 3/5] END max_depth=5, min_samples_leaf=6, min_samples_split=2, n_estimators=10;, score=0.755 total time=   0.0s\n",
    "[CV 4/5] END max_depth=5, min_samples_leaf=6, min_samples_split=2, n_estimators=10;, score=0.920 total time=   0.0s\n",
    "[CV 5/5] END max_depth=5, min_samples_leaf=6, min_samples_split=2, n_estimators=10;, score=0.864 total time=   0.0s\n",
    "[CV 1/5] END max_depth=9, min_samples_leaf=2, min_samples_split=2, n_estimators=50;, score=0.864 total time=   0.0s\n",
    "[CV 2/5] END max_depth=9, min_samples_leaf=2, min_samples_split=2, n_estimators=50;, score=0.880 total time=   0.0s\n",
    "[CV 3/5] END max_depth=9, min_samples_leaf=2, min_samples_split=2, n_estimators=50;, score=0.760 total time=   0.0s\n",
    "[CV 4/5] END max_depth=9, min_samples_leaf=2, min_samples_split=2, n_estimators=50;, score=0.894 total time=   0.0s\n",
    "[CV 5/5] END max_depth=9, min_samples_leaf=2, min_samples_split=2, n_estimators=50;, score=0.762 total time=   0.0s\n",
    "[CV 1/5] END max_depth=7, min_samples_leaf=3, min_samples_split=2, n_estimators=400;, score=0.884 total time=   0.3s\n",
    "[CV 2/5] END max_depth=7, min_samples_leaf=3, min_samples_split=2, n_estimators=400;, score=0.880 total time=   0.3s\n",
    "[CV 3/5] END max_depth=7, min_samples_leaf=3, min_samples_split=2, n_estimators=400;, score=0.776 total time=   0.3s\n",
    "[CV 4/5] END max_depth=7, min_samples_leaf=3, min_samples_split=2, n_estimators=400;, score=0.894 total time=   0.3s\n",
    "[CV 5/5] END max_depth=7, min_samples_leaf=3, min_samples_split=2, n_estimators=400;, score=0.744 total time=   0.3s\n",
    "[CV 1/5] END max_depth=8, min_samples_leaf=2, min_samples_split=5, n_estimators=200;, score=0.864 total time=   0.1s\n",
    "[CV 2/5] END max_depth=8, min_samples_leaf=2, min_samples_split=5, n_estimators=200;, score=0.857 total time=   0.1s\n",
    "[CV 3/5] END max_depth=8, min_samples_leaf=2, min_samples_split=5, n_estimators=200;, score=0.784 total time=   0.1s\n",
    "[CV 4/5] END max_depth=8, min_samples_leaf=2, min_samples_split=5, n_estimators=200;, score=0.894 total time=   0.1s\n",
    "[CV 5/5] END max_depth=8, min_samples_leaf=2, min_samples_split=5, n_estimators=200;, score=0.744 total time=   0.1s\n",
    "[CV 1/5] END max_depth=10, min_samples_leaf=5, min_samples_split=5, n_estimators=50;, score=0.884 total time=   0.0s\n",
    "[CV 2/5] END max_depth=10, min_samples_leaf=5, min_samples_split=5, n_estimators=50;, score=0.857 total time=   0.0s\n",
    "[CV 3/5] END max_depth=10, min_samples_leaf=5, min_samples_split=5, n_estimators=50;, score=0.824 total time=   0.0s\n",
    "[CV 4/5] END max_depth=10, min_samples_leaf=5, min_samples_split=5, n_estimators=50;, score=0.917 total time=   0.0s\n",
    "[CV 5/5] END max_depth=10, min_samples_leaf=5, min_samples_split=5, n_estimators=50;, score=0.727 total time=   0.0s\n",
    "[CV 1/5] END max_depth=8, min_samples_leaf=3, min_samples_split=10, n_estimators=50;, score=0.933 total time=   0.0s\n",
    "[CV 2/5] END max_depth=8, min_samples_leaf=3, min_samples_split=10, n_estimators=50;, score=0.880 total time=   0.0s\n",
    "[CV 3/5] END max_depth=8, min_samples_leaf=3, min_samples_split=10, n_estimators=50;, score=0.816 total time=   0.0s\n",
    "[CV 4/5] END max_depth=8, min_samples_leaf=3, min_samples_split=10, n_estimators=50;, score=0.913 total time=   0.0s\n",
    "[CV 5/5] END max_depth=8, min_samples_leaf=3, min_samples_split=10, n_estimators=50;, score=0.773 total time=   0.0s\n",
    "[CV 1/5] END max_depth=5, min_samples_leaf=6, min_samples_split=10, n_estimators=400;, score=0.884 total time=   0.3s\n",
    "[CV 2/5] END max_depth=5, min_samples_leaf=6, min_samples_split=10, n_estimators=400;, score=0.880 total time=   0.3s\n",
    "[CV 3/5] END max_depth=5, min_samples_leaf=6, min_samples_split=10, n_estimators=400;, score=0.808 total time=   0.3s\n",
    "[CV 4/5] END max_depth=5, min_samples_leaf=6, min_samples_split=10, n_estimators=400;, score=0.917 total time=   0.3s\n",
    "[CV 5/5] END max_depth=5, min_samples_leaf=6, min_samples_split=10, n_estimators=400;, score=0.762 total time=   0.3s\n",
    "[CV 1/5] END max_depth=8, min_samples_leaf=4, min_samples_split=10, n_estimators=100;, score=0.864 total time=   0.0s\n",
    "[CV 2/5] END max_depth=8, min_samples_leaf=4, min_samples_split=10, n_estimators=100;, score=0.857 total time=   0.0s\n",
    "[CV 3/5] END max_depth=8, min_samples_leaf=4, min_samples_split=10, n_estimators=100;, score=0.792 total time=   0.0s\n",
    "[CV 4/5] END max_depth=8, min_samples_leaf=4, min_samples_split=10, n_estimators=100;, score=0.894 total time=   0.0s\n",
    "[CV 5/5] END max_depth=8, min_samples_leaf=4, min_samples_split=10, n_estimators=100;, score=0.791 total time=   0.0s\n",
    "[CV 1/5] END max_depth=6, min_samples_leaf=4, min_samples_split=5, n_estimators=100;, score=0.857 total time=   0.0s\n",
    "[CV 2/5] END max_depth=6, min_samples_leaf=4, min_samples_split=5, n_estimators=100;, score=0.857 total time=   0.0s\n",
    "[CV 3/5] END max_depth=6, min_samples_leaf=4, min_samples_split=5, n_estimators=100;, score=0.800 total time=   0.0s\n",
    "[CV 4/5] END max_depth=6, min_samples_leaf=4, min_samples_split=5, n_estimators=100;, score=0.917 total time=   0.0s\n",
    "[CV 5/5] END max_depth=6, min_samples_leaf=4, min_samples_split=5, n_estimators=100;, score=0.773 total time=   0.0s\n",
    "[CV 1/5] END max_depth=10, min_samples_leaf=5, min_samples_split=10, n_estimators=100;, score=0.889 total time=   0.0s\n",
    "[CV 2/5] END max_depth=10, min_samples_leaf=5, min_samples_split=10, n_estimators=100;, score=0.880 total time=   0.0s\n",
    "[CV 3/5] END max_depth=10, min_samples_leaf=5, min_samples_split=10, n_estimators=100;, score=0.769 total time=   0.0s\n",
    "[CV 4/5] END max_depth=10, min_samples_leaf=5, min_samples_split=10, n_estimators=100;, score=0.917 total time=   0.0s\n",
    "[CV 5/5] END max_depth=10, min_samples_leaf=5, min_samples_split=10, n_estimators=100;, score=0.773 total time=   0.0s\n",
    "[CV 1/5] END max_depth=6, min_samples_leaf=3, min_samples_split=5, n_estimators=10;, score=0.844 total time=   0.0s\n",
    "[CV 2/5] END max_depth=6, min_samples_leaf=3, min_samples_split=5, n_estimators=10;, score=0.857 total time=   0.0s\n",
    "[CV 3/5] END max_depth=6, min_samples_leaf=3, min_samples_split=5, n_estimators=10;, score=0.809 total time=   0.0s\n",
    "[CV 4/5] END max_depth=6, min_samples_leaf=3, min_samples_split=5, n_estimators=10;, score=0.913 total time=   0.0s\n",
    "[CV 5/5] END max_depth=6, min_samples_leaf=3, min_samples_split=5, n_estimators=10;, score=0.744 total time=   0.0s\n",
    "[CV 1/5] END max_depth=4, min_samples_leaf=4, min_samples_split=10, n_estimators=10;, score=0.837 total time=   0.0s\n",
    "[CV 2/5] END max_depth=4, min_samples_leaf=4, min_samples_split=10, n_estimators=10;, score=0.857 total time=   0.0s\n",
    "[CV 3/5] END max_depth=4, min_samples_leaf=4, min_samples_split=10, n_estimators=10;, score=0.792 total time=   0.0s\n",
    "[CV 4/5] END max_depth=4, min_samples_leaf=4, min_samples_split=10, n_estimators=10;, score=0.917 total time=   0.0s\n",
    "[CV 5/5] END max_depth=4, min_samples_leaf=4, min_samples_split=10, n_estimators=10;, score=0.810 total time=   0.0s\n",
    "[CV 1/5] END max_depth=10, min_samples_leaf=3, min_samples_split=5, n_estimators=300;, score=0.884 total time=   0.2s\n",
    "[CV 2/5] END max_depth=10, min_samples_leaf=3, min_samples_split=5, n_estimators=300;, score=0.857 total time=   0.2s\n",
    "[CV 3/5] END max_depth=10, min_samples_leaf=3, min_samples_split=5, n_estimators=300;, score=0.760 total time=   0.2s\n",
    "[CV 4/5] END max_depth=10, min_samples_leaf=3, min_samples_split=5, n_estimators=300;, score=0.894 total time=   0.2s\n",
    "[CV 5/5] END max_depth=10, min_samples_leaf=3, min_samples_split=5, n_estimators=300;, score=0.762 total time=   0.2s\n",
    "RandomizedSearchCV(cv=5, estimator=RandomForestClassifier(), n_iter=50,\n",
    "                   param_distributions={'max_depth': [4, 5, 6, 7, 8, 9, 10],\n",
    "                                        'min_samples_leaf': [2, 3, 4, 5, 6],\n",
    "                                        'min_samples_split': [2, 5, 10],\n",
    "                                        'n_estimators': [10, 50, 100, 200, 300,\n",
    "                                                         400]},\n",
    "                   scoring='f1', verbose=3)\n",
    "In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook.\n",
    "On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.\n",
    "rscv.best_score_\n",
    "0.8630861229867441\n",
    "Question 7\n",
    "\n",
    "Question 7 : Report the best set of hyperparameters found by the search and the corresponding performance metrics. Compare the performance of the tuned model with the default model.\n",
    "Answer :\n",
    "# Best Parameters\n",
    "rscv.best_params_\n",
    "{'n_estimators': 50,\n",
    " 'min_samples_split': 10,\n",
    " 'min_samples_leaf': 3,\n",
    " 'max_depth': 8}\n",
    "# Best Estimator (Model)\n",
    "rscv.best_estimator_\n",
    "RandomForestClassifier(max_depth=8, min_samples_leaf=3, min_samples_split=10,\n",
    "                       n_estimators=50)\n",
    "In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook.\n",
    "On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.\n",
    "# Best F1 Score\n",
    "rscv.best_score_\n",
    "0.8630861229867441\n",
    "# Testing Accuracy on tuned model\n",
    "print('Results for Tuned Model :\\n')\n",
    "acc_tuned, pre_tuned , rec_tuned, f1_tuned = evaluate_model(xtest,ytest.values.flatten(),rscv)\n",
    "Results for Tuned Model :\n",
    "\n",
    "Accuracy Score  : 0.8352\n",
    "Precision Score : 0.8302\n",
    "Recall Score    : 0.8800\n",
    "F1 Score        : 0.8544\n",
    "dct = {\n",
    "    'metrics':['accuracy','precision','recall','f1'],\n",
    "    'base model':[acc_base,pre_base,rec_base,f1_base],\n",
    "    'tuned model':[acc_tuned,pre_tuned,rec_tuned,f1_tuned]\n",
    "}\n",
    "df_compare = pd.DataFrame(dct)\n",
    "df_compare\n",
    "metrics\tbase model\ttuned model\n",
    "0\taccuracy\t0.802198\t0.835165\n",
    "1\tprecision\t0.820000\t0.830189\n",
    "2\trecall\t0.820000\t0.880000\n",
    "3\tf1\t0.820000\t0.854369\n",
    "All parameters of the tuned model increases all scores.\n",
    "Question 8\n",
    "\n",
    "Question 8 : Interpret the model by analysing the decision boundaries of the random forest classifier. Plot the decision boundaries on a scatter plot of two of the most important features. Discuss the insights and limitations of the model for predicting heart disease risk.\n",
    "Answer :\n",
    "best_rfc = rscv.best_estimator_\n",
    "best_rfc\n",
    "RandomForestClassifier(max_depth=8, min_samples_leaf=3, min_samples_split=10,\n",
    "                       n_estimators=50)\n",
    "In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook.\n",
    "On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.\n",
    "imp_tuned = best_rfc.feature_importances_\n",
    "imp_tuned = pd.Series(imp_tuned)\n",
    "imp_tuned.index = best_rfc.feature_names_in_\n",
    "imp_tuned = imp_tuned.sort_values(ascending=False)\n",
    "imp_tuned\n",
    "ca          0.174087\n",
    "cp          0.172375\n",
    "thal        0.129944\n",
    "oldpeak     0.109850\n",
    "exang       0.100620\n",
    "thalach     0.092619\n",
    "age         0.054958\n",
    "chol        0.042937\n",
    "slope       0.040801\n",
    "trestbps    0.036456\n",
    "sex         0.028114\n",
    "restecg     0.014542\n",
    "fbs         0.002698\n",
    "dtype: float64\n",
    "imp_tuned[0:2]\n",
    "ca    0.174087\n",
    "cp    0.172375\n",
    "dtype: float64\n",
    "imp_tuned.plot(kind='bar',title='Feature Importances for tuned model',figsize=(16,8))\n",
    "<Axes: title={'center': 'Feature Importances for tuned model'}>\n",
    "\n",
    "top2 = xtrain[['ca','cp']]\n",
    "top2.head()\n",
    "ca\tcp\n",
    "124\t0\t2\n",
    "72\t0\t1\n",
    "15\t0\t2\n",
    "10\t0\t0\n",
    "163\t4\t2\n",
    "df_top2 =pd.concat([top2,ytrain],axis=1)\n",
    "df_top2.head()\n",
    "ca\tcp\ttarget\n",
    "124\t0\t2\t1\n",
    "72\t0\t1\t1\n",
    "15\t0\t2\t1\n",
    "10\t0\t0\t1\n",
    "163\t4\t2\t1\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "sns.scatterplot(data=df_top2,x='ca',y='cp',hue='target')\n",
    "plt.title('Actual Class Target plot')\n",
    "plt.show()\n",
    "\n",
    "df_top2['predicted'] = best_rfc.predict(xtrain)\n",
    "sns.scatterplot(data=df_top2,x='ca',y='cp',hue='predicted')\n",
    "plt.title('Predicted Class Target plot')\n",
    "plt.show()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
